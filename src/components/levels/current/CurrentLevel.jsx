import React from "react";
import { useState } from "react";
import './CurrentLevel.css'

import Exesize from "../../exesize/Exesize";
import AIComponent from "../../exesize/AIComponent";
import { saweLevel, deleteFromLEvel } from "../../../utils/api";



const CurrentLevel = ({level, updateLevel, updateLevelsList, refreshListBYRequest}) =>
{
    const [currentPackage, setCurrentPackage] = useState(0);
    const [number, serLevelNumber] = useState(level.number);
    const [language, serLevellanguage] = useState(level.language);
    
    const [exesizes, serLevelExesizes] = useState(level.exesizes);

    const handleLanguageChange = (event) => {
        serLevellanguage(event.target.value)
        level.language = event.target.value;
        updateLevel(level);
    };

    const handleAddPackage = (event) => {
        const pack = {
            id : -1,
            name: "Generated by new API",
            type: "situation",
            level: 1,
            exesize:[
                {
                    id : -1,
                    type: "test_question",
                    question : {
                        id: -1,
                        question:"",
                        test_answers:["","","",""],
                        right_var:0,
                    }

                },
            ]
        }
        level.exesizes.push(pack)
        serLevelExesizes((prevItems) => [...prevItems, pack]);
        updateLevel(level, true);
        setCurrentPackage(level.exesizes.length-1)
    };

    const handleLevelNumberChange = (event) => {
        serLevelNumber(event.target.value)
        level.number = event.target.value;
        updateLevel(level);
    };

    const handleAddExesize= (event)=>
    {
        
        const ex = {
            id : -1,
            type: "test_question",
            question : {
                id: -1,
                question:"",
                test_answers:["","","",""],
                right_var:0,
            }

        }
        console.log(level.exesizes[currentPackage].exesize);
        level.exesizes[currentPackage].exesize.push(ex);
        console.log(level.exesizes[currentPackage].exesize);
        updateLevel(level, true);
    };

    const updateExesize = (exesize, key) =>
    {
        if (exesize ==null)
        {
            level.exesizes[currentPackage].exesize.splice(key,1);
            serLevelExesizes(level.exesizes);
            updateLevel(level);
            return;
        }
        level.exesizes[currentPackage].exesize[key] = exesize
        serLevelExesizes(level.exesizes);
        updateLevel(level);
    };

    const handleSawe = (event) => {
        console.log(level)
        saweLevel({level: level})
        .then((data) => {
            updateLevel(data, true, true);
            refreshListBYRequest();
        })
        .catch((err) => {
            console.error(err);
          });

    };

    const handleDelete = (event) => {
        if (level.id != -1)
        {
            
             removeElement({object: event.target.id, object_id: level.id}, 
                ()=>{
                    console.log(event.target.id);
                    if (event.target.id == "level")
                        updateLevel(null, true, true);
                    else 
                        updateLevel(level, true, true);
                });
        }else{
            if (event.target.id == "level")
                updateLevel(null);
        }
    };

    const handlerDeletePack = (event) =>
    {
        if (level.exesizes[currentPackage].id != -1)
            {
                 removeElement({object: event.target.id, object_id: level.exesizes[currentPackage].id}, ()=>{
                    level.exesizes.splice(currentPackage, 1);
                    setCurrentPackage(currentPackage-1);
                    console.log(level);
                    updateLevel(level);
                 });
            }  else{
                level.exesizes.splice(currentPackage, 1);
                setCurrentPackage(currentPackage-1);
                updateLevel(level);
            }
    } 

    const removeElement = (data, action) => {
        
        deleteFromLEvel(data)
            .then((data) => { 
                updateLevelsList(data);
                action();
            })
            .catch((err) => {
                console.error(err);
            });
    };

    return (
        <>
            <div className="level-container">
                <div className="level-main-info">
                    <div className="level-number">
                        <label htmlFor="level-number">Уровень номер: </label>
                        <input
                            id="level-number"
                            type="text"
                            value={number === null ? undefined : number}
                            onChange={handleLevelNumberChange}
                            maxLength={3} 
                        />
                    </div>
                    <div className="language-selector">
                        <label>Язык: </label>
                        <select value={language} onChange={handleLanguageChange}>
                            <option value="ru">Русский</option>
                            <option value="uz">Узбекский</option>
                        </select>
                    </div>
                    <div className="buttons-container">
                        <button className="sawe-button" onClick={handleSawe}>
                            Сохранить
                        </button>
                        <button className="delete-button" id="level" onClick={handleDelete}>
                            Удалить
                        </button>
                    </div>
                </div>
                <div className="packages-section">
                    <label>Пакеты: </label>
                    <div className="packages-list">
                        {exesizes.map((pkg, i) => (
                            <button key={i} className={currentPackage == i ? "package-button-picked" :"package-button"} onClick={()=>{
                                setCurrentPackage(i);
                                serLevelExesizes([]);
                                const timeoutId = setTimeout(() => {
                                    serLevelExesizes(level.exesizes);
                                  }, 10);
                            }}>
                                {i+1}
                            </button>
                        ))}
                    </div>
                    <button className="add-package-button" onClick={handleAddPackage}>
                        +
                    </button>
                    <button id="package" className="add-package-button" onClick={handlerDeletePack}>
                        -
                    </button>
                </div>
            </div>
            <AIComponent/>
            {exesizes.length > 0 && exesizes[currentPackage].exesize.length > 0 && Array.isArray(exesizes[currentPackage].exesize) && (
                exesizes[currentPackage].exesize.map((exs, i) => (
                    <>
                    <Exesize 
                        key={i} 
                        exesize={exs} 
                        language={level.language} 
                        updateExesize={updateExesize} 
                        removeElement= {removeElement} 
                        handleSawe= {handleSawe} 
                        id={i}
                    />
                    </>
                ))
                
            )}
            <button className="add-package-button" onClick={handleAddExesize}>Добавить упражнение</button>

        </>
    )
}

export default CurrentLevel;